import * as ease from 'd3-ease';
export declare const eases: {
    linear: typeof ease.easeLinear;
    poly: ease.PolynomialEasingFactory;
    quad: typeof ease.easeQuad;
    cubic: typeof ease.easeCubic;
    sin: typeof ease.easeSin;
    exp: typeof ease.easeExp;
    circle: typeof ease.easeCircle;
    bounce: typeof ease.easeBounce;
    elastic: ease.ElasticEasingFactory;
    back: ease.BackEasingFactory;
    'linear-in': typeof ease.easeLinear;
    'poly-in': ease.PolynomialEasingFactory;
    'quad-in': typeof ease.easeQuadIn;
    'cubic-in': typeof ease.easeCubicIn;
    'sin-in': typeof ease.easeSinIn;
    'exp-in': typeof ease.easeExpIn;
    'circle-in': typeof ease.easeCircleIn;
    'bounce-in': typeof ease.easeBounceIn;
    'elastic-in': ease.ElasticEasingFactory;
    'back-in': ease.BackEasingFactory;
    'linear-out': Functor;
    'poly-out': ease.PolynomialEasingFactory;
    'quad-out': typeof ease.easeQuadOut;
    'cubic-out': typeof ease.easeCubicOut;
    'sin-out': typeof ease.easeSinOut;
    'exp-out': typeof ease.easeExpOut;
    'circle-out': typeof ease.easeCircleOut;
    'bounce-out': typeof ease.easeBounceOut;
    'elastic-out': ease.ElasticEasingFactory;
    'back-out': ease.BackEasingFactory;
    'linear-in-out': Functor;
    'poly-in-out': ease.PolynomialEasingFactory;
    'quad-in-out': typeof ease.easeQuadInOut;
    'cubic-in-out': typeof ease.easeCubicInOut;
    'sin-in-out': typeof ease.easeSinInOut;
    'exp-in-out': typeof ease.easeExpInOut;
    'circle-in-out': typeof ease.easeCircleInOut;
    'bounce-in-out': typeof ease.easeBounceInOut;
    'elastic-in-out': ease.ElasticEasingFactory;
    'back-in-out': ease.BackEasingFactory;
    'linear-out-in': Functor;
    'poly-out-in': Functor;
    'quad-out-in': Functor;
    'cubic-out-in': Functor;
    'sin-out-in': Functor;
    'exp-out-in': Functor;
    'circle-out-in': Functor;
    'bounce-out-in': Functor;
    'elastic-out-in': Functor;
    'back-out-in': Functor;
};
declare type Functor = (num: number) => number;
export {};
