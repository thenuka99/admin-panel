'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var ease = require('d3-ease');

function _interopNamespace(e) {
    if (e && e.__esModule) return e;
    var n = Object.create(null);
    if (e) {
        Object.keys(e).forEach(function (k) {
            if (k !== 'default') {
                var d = Object.getOwnPropertyDescriptor(e, k);
                Object.defineProperty(n, k, d.get ? d : {
                    enumerable: true,
                    get: function () {
                        return e[k];
                    }
                });
            }
        });
    }
    n['default'] = e;
    return Object.freeze(n);
}

var ease__namespace = /*#__PURE__*/_interopNamespace(ease);

var eases = {
    'linear': ease__namespace.easeLinear,
    'poly': ease__namespace.easePoly,
    'quad': ease__namespace.easeQuad,
    'cubic': ease__namespace.easeCubic,
    'sin': ease__namespace.easeSin,
    'exp': ease__namespace.easeExp,
    'circle': ease__namespace.easeCircle,
    'bounce': ease__namespace.easeBounce,
    'elastic': ease__namespace.easeElastic,
    'back': ease__namespace.easeBack,
    'linear-in': ease__namespace.easeLinear,
    'poly-in': ease__namespace.easePolyIn,
    'quad-in': ease__namespace.easeQuadIn,
    'cubic-in': ease__namespace.easeCubicIn,
    'sin-in': ease__namespace.easeSinIn,
    'exp-in': ease__namespace.easeExpIn,
    'circle-in': ease__namespace.easeCircleIn,
    'bounce-in': ease__namespace.easeBounceIn,
    'elastic-in': ease__namespace.easeElasticIn,
    'back-in': ease__namespace.easeBackIn,
    'linear-out': d3_ease_reverse(ease__namespace.easeLinear),
    'poly-out': ease__namespace.easePolyOut,
    'quad-out': ease__namespace.easeQuadOut,
    'cubic-out': ease__namespace.easeCubicOut,
    'sin-out': ease__namespace.easeSinOut,
    'exp-out': ease__namespace.easeExpOut,
    'circle-out': ease__namespace.easeCircleOut,
    'bounce-out': ease__namespace.easeBounceOut,
    'elastic-out': ease__namespace.easeElasticOut,
    'back-out': ease__namespace.easeBackOut,
    'linear-in-out': d3_ease_reflect(ease__namespace.easeLinear),
    'poly-in-out': ease__namespace.easePolyInOut,
    'quad-in-out': ease__namespace.easeQuadInOut,
    'cubic-in-out': ease__namespace.easeCubicInOut,
    'sin-in-out': ease__namespace.easeSinInOut,
    'exp-in-out': ease__namespace.easeExpInOut,
    'circle-in-out': ease__namespace.easeCircleInOut,
    'bounce-in-out': ease__namespace.easeBounceInOut,
    'elastic-in-out': ease__namespace.easeElasticInOut,
    'back-in-out': ease__namespace.easeBackInOut,
    'linear-out-in': d3_ease_reflect(d3_ease_reverse(ease__namespace.easeLinear)),
    'poly-out-in': d3_ease_reflect(d3_ease_reverse(ease__namespace.easePoly)),
    'quad-out-in': d3_ease_reflect(d3_ease_reverse(ease__namespace.easeQuad)),
    'cubic-out-in': d3_ease_reflect(d3_ease_reverse(ease__namespace.easeCubic)),
    'sin-out-in': d3_ease_reflect(d3_ease_reverse(ease__namespace.easeSin)),
    'exp-out-in': d3_ease_reflect(d3_ease_reverse(ease__namespace.easeExp)),
    'circle-out-in': d3_ease_reflect(d3_ease_reverse(ease__namespace.easeCircle)),
    'bounce-out-in': d3_ease_reflect(d3_ease_reverse(ease__namespace.easeBounce)),
    'elastic-out-in': d3_ease_reflect(d3_ease_reverse(ease__namespace.easeElastic)),
    'back-out-in': d3_ease_reflect(d3_ease_reverse(ease__namespace.easeBack))
};
function d3_ease_reverse(f) {
    return function (t) {
        return 1 - f(1 - t);
    };
}
function d3_ease_reflect(f) {
    return function (t) {
        return 0.5 * (t < 0.5 ? f(2 * t) : (2 - f(2 - 2 * t)));
    };
}

exports.eases = eases;
