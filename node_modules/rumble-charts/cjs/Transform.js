'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
require('./helpers/colorFunc.js');
require('d3-shape');
require('d3-ease');
var isUndefined = require('./helpers/isUndefined.js');
var proxyChildren = require('./helpers/proxyChildren.js');
var transform = require('./helpers/transform.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

/**
 * Transforms `series` data according chosen `method`.
 *
 * As a wrapper it takes `series` obtained from its parent and gives it to its children.
 */
function Transform(props) {
    var className = props.className, layerWidth = props.layerWidth, layerHeight = props.layerHeight, scaleX = props.scaleX, scaleY = props.scaleY;
    var transformedProps = transform.transform(props, props.method);
    var children = proxyChildren.proxyChildren(props.children, transformedProps, {
        layerWidth: isUndefined.isUndefined(transformedProps.layerWidth) ? layerWidth : transformedProps.layerWidth,
        layerHeight: isUndefined.isUndefined(transformedProps.layerHeight) ? layerHeight : transformedProps.layerHeight,
        scaleX: isUndefined.isUndefined(transformedProps.scaleX) ? scaleX : transformedProps.scaleX,
        scaleY: isUndefined.isUndefined(transformedProps.scaleY) ? scaleY : transformedProps.scaleY
    });
    return (React__default['default'].createElement("g", { className: className }, children));
}

exports.Transform = Transform;
