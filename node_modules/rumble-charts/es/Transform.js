import React from 'react';
import './helpers/colorFunc.js';
import 'd3-shape';
import 'd3-ease';
import { isUndefined } from './helpers/isUndefined.js';
import { proxyChildren } from './helpers/proxyChildren.js';
import { transform } from './helpers/transform.js';

/**
 * Transforms `series` data according chosen `method`.
 *
 * As a wrapper it takes `series` obtained from its parent and gives it to its children.
 */
function Transform(props) {
    var className = props.className, layerWidth = props.layerWidth, layerHeight = props.layerHeight, scaleX = props.scaleX, scaleY = props.scaleY;
    var transformedProps = transform(props, props.method);
    var children = proxyChildren(props.children, transformedProps, {
        layerWidth: isUndefined(transformedProps.layerWidth) ? layerWidth : transformedProps.layerWidth,
        layerHeight: isUndefined(transformedProps.layerHeight) ? layerHeight : transformedProps.layerHeight,
        scaleX: isUndefined(transformedProps.scaleX) ? scaleX : transformedProps.scaleX,
        scaleY: isUndefined(transformedProps.scaleY) ? scaleY : transformedProps.scaleY
    });
    return (React.createElement("g", { className: className }, children));
}

export { Transform };
